# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout of github repository
      uses: actions/checkout@v3

    - name: Setup of environment
      uses: ./.github/actions/setup

    - name: Check repository content
      shell: bash
      run: pwd && ls -la

    - name: Cache Gradle packages
      uses: actions/cache@v1
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle

    - name: Build with Gradle
      run: gradle wrapper && ./gradlew buildPlugin
      shell: bash

    - name: Run tests
      run: ./gradlew test
      shell: bash

    - name: Sonarcloud scans
      uses: ./.github/actions/sonar
      env:
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}

    - name: Publish built plugin
      uses: actions/upload-artifact@v3
      with:
        name: builtPlugin
        path: ./build/distributions/


  deploy:
    needs: build

    runs-on: XBY_IJMP_machine

    concurrency: test
    environment:
      name: test
      url: http://178.172.233.157/plugin-builds/${{steps.extract_branch.outputs.BRANCH_NAME2}}/${{ steps.generate_file_name.outputs.NEW_FILE_NAME2 }}

    steps:
    - name: Extract branch name
      id: extract_branch
      shell: bash
      run: >
        echo "BRANCH_NAME2=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT && 
        echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV &&
        echo "Github branch name is: $BRANCH_NAME"

    - name: Check current directory
      shell: bash
      run: pwd && ls -la

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: builtPlugin
        path: ./build/distributions/

    - name: Check plugin built availability
      shell: bash
      run: ls -la ./build/distributions

    - name: Get name of build plugin archive
      id: getting_file_name
      shell: bash
      run: >
        CURRENT_FILE_PATH=$(echo $(find build -name "for-mainframe*")) &&
        echo "CURRENT_FILE_PATH=$CURRENT_FILE_PATH" >> $GITHUB_ENV &&
        echo "Name of current file: $CURRENT_FILE_PATH"

    - name: Generate new name for built plugin
      id: generate_file_name
      shell: bash
      run: >
        TEMP_VAR=$CURRENT_FILE_PATH
        NEW_FILE_NAME="$(echo ${TEMP_VAR%.zip*})."$(date +"%Y-%m-%dT%H:%M:%S%:z" | tr ':' _)".zip" &&
        NEW_FILE_NAME=${NEW_FILE_NAME##*/} &&
        echo "NEW_FILE_NAME=$NEW_FILE_NAME" >> $GITHUB_ENV &&
        echo "Name of new file: $NEW_FILE_NAME" &&
        echo "NEW_FILE_NAME2=$NEW_FILE_NAME" >> $GITHUB_OUTPUT &&
        NEW_FILE_PATH="/var/www/plugin-builds/$BRANCH_NAME/$NEW_FILE_NAME" &&
        echo "NEW_FILE_PATH=$NEW_FILE_PATH" >> $GITHUB_ENV &&
        echo "Path to new file: $NEW_FILE_PATH"

    - name: Move built plugin to destination folder
      shell: bash
      run: >
        mkdir -p /var/www/plugin-builds/$BRANCH_NAME2 &&
        mv $CURRENT_FILE_PATH $NEW_FILE_PATH

    - name: Sign archives
      shell: bash
      run: >
        echo "${{ secrets.SIGN_ARCHIVE_SECRET }}" > private.key &&
        gpg --import private.key &&
        echo "import passed" &&
        echo "use-agent" >> ~/.gnupg/gpg.conf &&
        echo "agent-write-to-file passed" &&
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf &&
        echo "pinentry-mode write to file passed" &&
        export GPG_TTY=$(tty) &&
        echo "export GPG tty variable passed" &&
        eval $(gpg-agent --daemon) &&
        echo "starting gpg-agent passed" &&
        gpg --batch --passphrase "${{ secrets.GPG_PASSPHRASE }}" --detach-sign --armor --output $NEW_FILE_PATH.asc $NEW_FILE_PATH